#!/bin/bash
#
# chkconfig: 345 90 50
# description: set routing for BigIP traffic on any acceptable interface. 
#              removes the need to SNAT a BigIP virtual (with assumptions below)
#
# author: David Osborne
# 
# INSTRUCTIONS: 
# 
#  Place in /etc/init.d of host you wish to add as a node to 
#  your BigIP loadbalancer.
#  
#  To start it:
#
#  service <script_name> start 
#
#
#
# DETAILED INFORMATION::
#
# This script is a BigIP SNAT killer. This script negates 
# the need to SNAT your virtual address on your BigIP
#
# This script will check a specified number of interfaces
# on a server and then compare the broadcast address of it
# to the broadcast address of each BigIP floating address
# If they match, apply the routes and rules
#
# An additional sysconfig file can be supplied as well
# to specify which interface you want to apply the bigip as a 
# conditional gateway:
#
#  /etc/sysconfig/bigip-gw
#
# Valid "OPTIONS" are 
#  a specific iface ex:  "eth3"
#    -or-
#  ""  (blank) - whice will use the iface which corresponds to
#                the FQDN of the host.
#
#
# TO DO: 
# 1. Ability to apply to all interfaces
# 2. Ability to route to a self IP not in your 
#    broadcast via the gateway used in the BigIP route
#    (in the BigIP UI: Network -> Routes)
# 3. Persist rules/routes across network restarts. 
#    Gets tricky when configuration automation is also 
#    part of the picture.

# ****** ASSUMPTIONS ******
# Assumes your using this for IPv4 traffic
# Makes assumptions on the PUBLIC IPv4 ranges (multicast being the oddball)
# Please locate the PUB_IPV4_SPACE variable below and tweak


# Setup yer PATH!
PATH=:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
export PATH

# source function library
. /etc/rc.d/init.d/functions

# source sysconfig file

SYS_CONFIG="/etc/sysconfig/bigip-gw"

if [ -f ${SYS_CONFIG} ]; then
  source ${SYS_CONFIG}
else
  OPTIONS=""
fi


# Check 


# Set any global vars here

RT_TABLES=/etc/iproute2/rt_tables


# Support functions here

get_bcast()
{
#  1 input variable required
#
# $1 : Primary IP address of the interface under current
#      analysis
 
ipcalc -b ${1} |sed "s|BROADCAST=||g"

}

# The following "check" functions
# are failsafe measures which perform
# the action (add or del) only if it is needed.
# That way you wont wind up with lingering 
# artifacts in rt_tables or your iptables 
# config, etc..

check_mangle()
{ 
# One input variable required.
# $1 = interface
# $2 = fwmark integer

# Make sure mark exists before routing happens
# The first handles incoming packets

if ! (iptables -t mangle -L PREROUTING -v|grep "CONNMARK restore" |grep ${1} > /dev/null); then
  iptables -t mangle -A PREROUTING -i ${1} -j CONNMARK --restore-mark
  
fi

# The second handles outgoing packets
if ! (iptables -t mangle -L OUTPUT -v |grep "CONNMARK restore"|grep ${1}  > /dev/null); then
  iptables -t mangle -A OUTPUT -o ${1} -j CONNMARK --restore-mark
fi
}


check_public_input()
{
# Three input variables required
# $1 = public ip range
# $2 = iface
# $3 = fwmark integer
if ! (iptables -t mangle -L INPUT -v |grep ${1}|grep ${2} |grep "MARK set 0x${3}" > /dev/null); then
  iptables -t mangle -A INPUT -i ${2} -m conntrack --ctstate NEW -m iprange --src-range ${1} -j MARK --set-mark ${3}
fi

}


check_rule()
{
# 4 input variables required
#
# $1 : The action (add -or- del)
# $2 : The route metric (priority)
# $3 : The connmark value (fwmark 0x<int>)
# $4 : The table name as given in /etc/iproute2/rt_tables

# Check if the rule exists, act if not
if [ ${1} == "add" ]; then
  if ! (ip rule list |grep ${2} |grep ${3} |grep ${4} > /dev/null); then
    ip rule ${1} prio ${2} from all fwmark ${3} lookup ${4}
  fi
else
  ip rule ${1} prio ${2} from all fwmark ${3} lookup ${4}
fi
}


check_route()
{
#  5 input variables require
#
# $1 : The action (add -or- del)
# $2 : The table name as given in /etc/iproute2/rt_tables
# $3 : The gateway ip address you wish to use
# $4 : The interface to which you wish to apply the route
# $5 : The route metric (priority)


if [ ${1} == "add" ]; then
  if ! (ip route show table 0 |grep ${2}|grep ${3} |grep ${4} > /dev/null); then
    #ip route ${1} table ${2} default via ${3} dev ${4} metric ${5}
    ip route ${1} default via ${3} dev ${4} table ${2} metric ${5}  
  fi
else
  ip route ${1} default table ${2} via ${3} dev ${4} metric ${5}
fi

#ip route add default via 192.168.0.1 dev wlan0 table wlan-route

}


check_save_mark()
{
if ! (iptables -L INPUT -t mangle -v |grep "CONNMARK save" > /dev/null); then
  iptables -t mangle -A INPUT -j CONNMARK --save-mark
fi
}


check_rt_table()
{
#  3 input variables required
#
# $1 : The action (add -or- del)
# $2 : The table metric
# $3 : The table name
if [ ${1} == "add" ]; then
  if ! (grep "${2} ${3}" ${RT_TABLES} > /dev/null); then
    echo "${2} ${3}" >> ${RT_TABLES}
  fi
else
   sed -i "/^${2}.*$/d" ${RT_TABLES}
fi
}



# Start the main run of the script


route_manager()
{
# One input variable require
# $1 =  "add" or "del" 
# Dont worry we manage via stardd or stop 

ACTION=${1}

# Set some vars here (restart does funky things if 
# these vars are not set here!)
# Set some vars

# 11.0.0.0-126.255.255.255 128.0.0.0-172.15.255.255

ROUTE_METRIC=100
MARK_COUNT=1
TABLE_METRIC=201
BIGIP_FLOATERS=(10.125.44.52/26 10.124.80.170/26 10.125.44.70/28)
PUB_IPV4_SPACE=(0.0.0.0-9.255.255.255 11.0.0.0-168.255.255.255 170.0.0.0-172.15.255.255\ 
                172.33.0.0-192.167.255.255 192.169.0.0-223.255.255.255 \
                240.0.0.0-254.255.255.255)


# Get all the ifaces on the box
# /etc/sysconfig/bigip-gw is 
# sourced at the top of the file.
# Valid "OPTIONS" are 
#  "all" 
#    -or-
#  a specific iface ex:  "eth3"
#    -or-
#  ""  (blank) - whice will use the iface which corresponds to
#                the FQDN of the host.

if [ "${OPTIONS}" == "all" ]; then
   IFACE_ARRAY=($(ifconfig -s |egrep -v '^lo|^Iface'|awk '{print $1}'))

elif [ -z "${OPTIONS}" ]; then
  MY_IP=$(dig ${HOSTNAME} +short)
  IFACE_ARRAY=($(ip -o addr |grep ${MY_IP} |awk '{print $2}'))

else
  IFACE_ARRAY=($(ip -o addr |egrep ${OPTIONS} |awk '{print $2}'))
fi


for floater in ${BIGIP_FLOATERS[@]}; do
   for iface in ${IFACE_ARRAY[@]}; do
       APPLIED=no
       ip_addr=$(ip -o addr show ${iface}|grep -v secondary | awk '/inet /{print substr($4,0)}')
       BIGIP_BCAST=$(get_bcast ${floater})
       HOST_BCAST=$(get_bcast ${ip_addr})
       if [ $HOST_BCAST == $BIGIP_BCAST ]; then
         echo "$floater is the BIG-IP transit gateway for local address: ${ip_addr}. ${ACTION} rules/routes..."
         APPLIED=yes
       fi
       # If we match an iface's address broadcast to a floater's broadcast, let's
       # build or tear domw some rules/routes

       if [ $APPLIED == "yes" ]; then
         
         # Set the big ip floater as the gateway in this instance.
         BIGIP_GW=$(echo ${floater}|sed "s|/.*$||g")
         BIGIP_GW_NAME="bigip_gw_$(echo ${BIGIP_GW} |sed 's|\.|-|g')"

         if [ ${ACTION} == "del" ]; then
           # Delete rule and route
           check_rule ${ACTION} ${ROUTE_METRIC} ${MARK_COUNT} ${BIGIP_GW_NAME}
           check_route ${ACTION}  ${BIGIP_GW_NAME} ${BIGIP_GW} ${iface} ${ROUTE_METRIC} 

           # Just flush all mangle rules
           iptables -t mangle -F

           # Clean out the route table
           check_rt_table ${ACTION} ${TABLE_METRIC} ${BIGIP_GW_NAME}


         else
           # Define the table for the route
           check_rt_table ${ACTION} ${TABLE_METRIC} ${BIGIP_GW_NAME}

           # Add route and rule
           check_route ${ACTION}  ${BIGIP_GW_NAME} ${BIGIP_GW} ${iface} ${ROUTE_METRIC} 
           check_rule ${ACTION} ${ROUTE_METRIC} ${MARK_COUNT} ${BIGIP_GW_NAME}

           # Flush route cache to ensure new routes are immediately active
  #         ip route flush cache

           # Check and apply mangle if need be, if ACTION is del just flush mangle rules
           check_mangle ${iface} ${MARK_COUNT}

           # Now check to see if the packets have been mark and mark if not
           for public_addr in ${PUB_IPV4_SPACE[@]}; do
             check_public_input ${public_addr} ${iface} ${MARK_COUNT}
           done

           # Check and apply mangle if need be, if ACTION is del just flush mangle rules
           #check_mangle ${iface}
      
           #check_save_mark ${iface}
 
         # Disable reverse path filtering 
         echo 0 > /proc/sys/net/ipv4/conf/${iface}/rp_filter
         echo 1 > /proc/sys/net/ipv4/ip_forward 
         fi
         # Bump your counters
         MARK_COUNT=$((${MARK_COUNT} + 1))
         ROUTE_METRIC=$((${ROUTE_METRIC} + 10))
         TABLE_METRIC=$((${TABLE_METRIC} + 1))
       fi
     done
  done
}


# TODO: The echo_succuess and echo_failure functions
#       dont really work in the current writeup. 

start()
{
 route_manager add && \
 check_save_mark && \
 ip route flush cache &&
 service iptables save
}

stop(){
 route_manager del && \
 ip route flush cache
}



case "$1" in
  start)
        start
        ;;
  stop)
        stop 
        ;;
  restart)
        stop
        start
        ;;
  *)
        echo $"Usage: $0 {start|stop|restart}"
        RETVAL=1
esac
